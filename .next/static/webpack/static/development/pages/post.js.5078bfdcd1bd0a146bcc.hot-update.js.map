{"version":3,"file":"static/webpack/static/development/pages/post.js.5078bfdcd1bd0a146bcc.hot-update.js","sources":["webpack:///./pages/post.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PrismicDOM from \"prismic-dom\";\n\nimport { getBlogPostAPI, getBlogPostsAPI } from \"../api\";\nimport linkResolver from \"../helpers\";\nimport htmlSerializer from \"../helpers/htmlSerializer\";\n\nimport BlogPostCard from \"../components/BlogPostCard\";\nimport Layout from \"../components/Layout\";\n\nimport \"./post.scss\";\n\nexport default class BlogPost extends Component {\n  static async getInitialProps(context) {\n    // we get the slug of the post so that we can\n    // query the API with it\n    const { slug } = context.query;\n    const response = await getBlogPostAPI(slug);\n    const suggestedPosts = await getBlogPostsAPI({ pageSize: 3 });\n    return {\n      postData: response[0],\n      suggestedPosts: suggestedPosts.results\n    };\n  }\n\n  shareHandler = () => {\n    if (FB) {\n      FB.ui(\n        {\n          method: \"share\",\n          display: \"popup\",\n          href: \"https://sour-zebra-65.localtunnel.me/blog/hello-test\"\n        },\n        function(response) {}\n      );\n    }\n  };\n\n  render() {\n    const { suggestedPosts, postData } = this.props;\n    const post = postData.data;\n    return (\n      //   <article>\n      //     <h1>{post.title.length ? post.title[0].text : \"\"}</h1>\n      //     {/* Here we pass our rich text field to Prismics RichText renderer, along with our linkResolver */}\n      //     {RichText.render(post.body, linkResolver)}\n      //   </article>\n      <Layout paddingTop={\"4rem\"} hideNavigation>\n        <section className=\"article\">\n          <div className=\"article--container\">\n            <h1 className=\"article__title\">\n              {post.title.length ? post.title[0].text : \"\"}\n            </h1>\n            <p className=\"article__summary\">\n              {post.summary.length ? post.summary[0].text : \"\"}\n            </p>\n            <div className=\"article__content\">\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: PrismicDOM.RichText.asHtml(\n                    post.body,\n                    linkResolver,\n                    htmlSerializer\n                  )\n                }}\n              />\n            </div>\n          </div>\n        </section>\n\n        <section className=\"article__related__posts\">\n          <section className=\"blog__posts\">\n            {/* <p>More articles</p> */}\n            <div className=\"blog__posts--container\">\n              {Array.isArray(suggestedPosts) &&\n                suggestedPosts.map((post, index) => (\n                  <BlogPostCard key={index} post={post} />\n                ))}\n            </div>\n          </section>\n        </section>\n        <aside className=\"article__share\">\n          <div className=\"article__share--wrapper\">\n            <div className=\"article__share__list\">\n              <button className=\"share_button\" onClick={this.shareHandler}>\n                <span>\n                  <svg\n                    role=\"img\"\n                    viewBox=\"0 0 24 24\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <title>Facebook icon</title>\n                    <path d=\"M22.676 0H1.324C.593 0 0 .593 0 1.324v21.352C0 23.408.593 24 1.324 24h11.494v-9.294H9.689v-3.621h3.129V8.41c0-3.099 1.894-4.785 4.659-4.785 1.325 0 2.464.097 2.796.141v3.24h-1.921c-1.5 0-1.792.721-1.792 1.771v2.311h3.584l-.465 3.63H16.56V24h6.115c.733 0 1.325-.592 1.325-1.324V1.324C24 .593 23.408 0 22.676 0\" />\n                  </svg>\n                </span>\n              </button>\n\n              <a\n                className=\"\"\n                href=\"https://twitter.com/intent/tweet\"\n                data-size=\"large\"\n              >\n                Tweet\n              </a>\n            </div>\n          </div>\n        </aside>\n      </Layout>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AAaA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAOA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAEA;AACA;AADA;AADA;AAaA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAMA;AAAA;AAMA;AACA;AACA;AAHA;AAxDA;AAoEA;;;;;;AAhGA;;;;;;AACA;AACA;AACA;;AACA;AACA;;AADA;;AACA;AAAA;AAAA;AACA;;AADA;AACA;AACA;AACA;AAFA;AACA;;;;;;;;;;;;;;;;;;AARA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}